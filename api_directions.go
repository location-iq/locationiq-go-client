/*
 * LocationIQ
 *
 * LocationIQ provides flexible enterprise-grade location based solutions. We work with developers, startups and enterprises worldwide serving billions of requests everyday. This page provides an overview of the technical aspects of our API and will help you get started.
 *
 * API version: 1.1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package locationiq

import (
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
	"github.com/antihax/optional"
)

// Linger please
var (
	_ _context.Context
)

// DirectionsApiService DirectionsApi service
type DirectionsApiService service

// DirectionsOpts Optional parameters for the method 'Directions'
type DirectionsOpts struct {
    Bearings optional.String
    Radiuses optional.String
    GenerateHints optional.String
    Approaches optional.String
    Exclude optional.String
    Alternatives optional.Float32
    Steps optional.String
    Annotations optional.String
    Geometries optional.String
    Overview optional.String
    ContinueStraight optional.String
}

/*
Directions Directions Service
Finds the fastest route between coordinates in the supplied order.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param coordinates String of format {longitude},{latitude};{longitude},{latitude}[;{longitude},{latitude} ...] or polyline({polyline}) or polyline6({polyline6}). polyline follows Google's polyline format with precision 5
 * @param optional nil or *DirectionsOpts - Optional Parameters:
 * @param "Bearings" (optional.String) -  Limits the search to segments with given bearing in degrees towards true north in clockwise direction. List of positive integer pairs separated by semi-colon and bearings array should be equal to length of coordinate array. Input Value :- {bearing};{bearing}[;{bearing} ...] Bearing follows the following format : bearing {value},{range} integer 0 .. 360,integer 0 .. 180
 * @param "Radiuses" (optional.String) -  Limits the search to given radius in meters Radiuses array length should be same as coordinates array, eaach value separated by semi-colon. Input Value - {radius};{radius}[;{radius} ...] Radius has following format :- double >= 0 or unlimited (default)
 * @param "GenerateHints" (optional.String) -  Adds a Hint to the response which can be used in subsequent requests, see hints parameter. Input Value - true (default), false Format - Base64 String
 * @param "Approaches" (optional.String) -  Keep waypoints on curb side. Input Value - {approach};{approach}[;{approach} ...] Format - curb or unrestricted (default)
 * @param "Exclude" (optional.String) -  Additive list of classes to avoid, order does not matter. input Value - {class}[,{class}] Format - A class name determined by the profile or none.
 * @param "Alternatives" (optional.Float32) -  Search for alternative routes. Passing a number alternatives=n searches for up to n alternative routes. [ true, false (default), or Number ]
 * @param "Steps" (optional.String) -  Returned route steps for each route leg [ true, false (default) ]
 * @param "Annotations" (optional.String) -  Returns additional metadata for each coordinate along the route geometry.  [ true, false (default), nodes, distance, duration, datasources, weight, speed ]
 * @param "Geometries" (optional.String) -  Returned route geometry format (influences overview and per step) [ polyline (default), polyline6, geojson ]
 * @param "Overview" (optional.String) -  Add overview geometry either full, simplified according to highest zoom level it could be display on, or not at all. [ simplified (default), full, false ]
 * @param "ContinueStraight" (optional.String) -  Forces the route to keep going straight at waypoints constraining uturns there even if it would be faster. Default value depends on the profile [ default (default), true, false ]
@return DirectionsDirections
*/
func (a *DirectionsApiService) Directions(ctx _context.Context, coordinates string, localVarOptionals *DirectionsOpts) (DirectionsDirections, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  DirectionsDirections
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/directions/driving/{coordinates}"
	localVarPath = strings.Replace(localVarPath, "{"+"coordinates"+"}", _neturl.QueryEscape(parameterToString(coordinates, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if localVarOptionals != nil && localVarOptionals.Bearings.IsSet() {
		localVarQueryParams.Add("bearings", parameterToString(localVarOptionals.Bearings.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Radiuses.IsSet() {
		localVarQueryParams.Add("radiuses", parameterToString(localVarOptionals.Radiuses.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.GenerateHints.IsSet() {
		localVarQueryParams.Add("generate_hints", parameterToString(localVarOptionals.GenerateHints.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Approaches.IsSet() {
		localVarQueryParams.Add("approaches", parameterToString(localVarOptionals.Approaches.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Exclude.IsSet() {
		localVarQueryParams.Add("exclude", parameterToString(localVarOptionals.Exclude.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Alternatives.IsSet() {
		localVarQueryParams.Add("alternatives", parameterToString(localVarOptionals.Alternatives.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Steps.IsSet() {
		localVarQueryParams.Add("steps", parameterToString(localVarOptionals.Steps.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Annotations.IsSet() {
		localVarQueryParams.Add("annotations", parameterToString(localVarOptionals.Annotations.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Geometries.IsSet() {
		localVarQueryParams.Add("geometries", parameterToString(localVarOptionals.Geometries.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Overview.IsSet() {
		localVarQueryParams.Add("overview", parameterToString(localVarOptionals.Overview.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ContinueStraight.IsSet() {
		localVarQueryParams.Add("continue_straight", parameterToString(localVarOptionals.ContinueStraight.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarQueryParams.Add("key", key)
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 200 {
			var v DirectionsDirections
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
